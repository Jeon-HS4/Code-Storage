// Client의 경우 주석이 많지 않아서 eclass의 코드 사용
// Server Calculate Code...

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>

#define BUF_SIZE 1024
#define MAX_PACKET_SIZE 120

void ErrorHandling(char *message);
int calculate(int opndCnt, int data[], char op);

int main()
{	// 아래 추가로 정의한 변수들도 처음 정의부로 이동...sytle대로 하면 됨, 근데 위로 다 옮길경우 중간중간 초기화 하는 부분에 맞춰서 초기화 필요
	WSADATA		wsaData;
	SOCKET		hServSock, hClntSock;
	char		message[BUF_SIZE];
	int			strLen, i=0;
	SOCKADDR_IN servAdr, clntAdr;
	int			clntAdrSize;

	if( WSAStartup(MAKEWORD(2, 2), &wsaData) !=0 )
		ErrorHandling("WSAStartup() error!"); 
	
	// 1. socket 생성하기.
	hServSock=socket(PF_INET, SOCK_STREAM, 0);   
	if(hServSock==INVALID_SOCKET)
		ErrorHandling("socket() error");
	
	memset(&servAdr, 0, sizeof(servAdr));
	servAdr.sin_family			= AF_INET;
	servAdr.sin_addr.s_addr		= inet_addr("127.0.0.1"); // big endian.
									//htonl( INADDR_ANY ); // Big endian
	servAdr.sin_port			= htons( 9000 );

	// 2. bind 서버 소켓에 주소 설정하기
	if( bind(hServSock, (SOCKADDR*)&servAdr, sizeof(servAdr)) == SOCKET_ERROR )
		ErrorHandling("bind() error");
	
	// 3. listen : 클라이언트의 연결 요청 수신 준비
	int backlog = 2, ret;
	ret = listen(hServSock, backlog);
	if (ret == SOCKET_ERROR) {
		ErrorHandling("listen() error");
	}

	// 서버이므로 여러개의 client 연결 요청을 수락 및 서비스 제공(recv/send)
	while (1)
	{
		// 4. accept : 클라이언트 연결 설정을 수락.
		//			   새로운 데이터 전송용 소켓 생성.
		clntAdrSize = sizeof(clntAdr);
		printf("Server> wait client...\n");
		hClntSock = accept(hServSock,
			(SOCKADDR*)&clntAdr,
			&clntAdrSize
		);
		if (hClntSock == INVALID_SOCKET) {
			ErrorHandling("accept() error");
		}
		printf("Server> a client(IP:%s, Port:%d) is connedted.\n",
			inet_ntoa(clntAdr.sin_addr),
			ntohs(clntAdr.sin_port)
		);

		char opndCnt;
		char data[MAX_PACKET_SIZE];
		int flag = 1;
		// server APP 프로토콜 구현하기...기능: 계산기 기능 구현
		while (flag) {
			printf("Server> 클라이언트의 계산 요청 대기.\n");
			// 0. 수신 시 상대 클라이언트의 종료 확인 및 loop탈출...
			

			// 1. 1byte를 읽어서 피연산자 수 및 추가로 읽어야 하는 데이터량 계산
			ret = recv(hClntSock, &opndCnt,1,0);		// recv는 소켓의 수신버퍼에 있는 데이터를 가져옴
			if (ret <= 0) {
				printf("Server> recv() error\n");
				break;
			}

			// 2. 나머지 데이터 수신(피연산자 및 연산자)...loop를 통해 수신
			int rcvTarget, rcvSum=0, result;
			rcvTarget= opndCnt * sizeof(int) + sizeof(char);		// 수신받아야 하는 데이터의 크기

			while (rcvSum<rcvTarget) {
				ret = recv(hClntSock, &data[rcvSum], rcvTarget-rcvSum, 0);		// loop를 통해서 rcvSum의 크기만큼 데이터 크기 간격을 두고 recv받음
				if (ret <= 0) {
					flag = 0;
					break;
				}
				rcvSum += ret;	// ret은 수신한 데이터의 크기. >> rcvSum은 지금까지 수신한 데이터 크기
			}
			if (flag == 1) {
				// 3. 계산
				result =  calculate((int)opndCnt, (int*)data, data[rcvTarget - 1]);		// calculate 함수 내부에서는 data를 int포인터로 이용하도록 변경 > 변수의 타입을 사용하기 편하게 변경
				printf("Server> 계산 결과 = %d\n",result);

				// 4. 결과 client로 전송
				ret = send(hClntSock,(char*)&result,sizeif(result),0);	// send나 recv 두번째 인자로는 char배열이 들어가야 함
				if (ret == SOCKET_ERROR) {
					printf("Server> send() error\n");
					break;
				}
			}
		}
		

		printf("Server> 클라이언트(IP:%s, Port:%d)와 연결 종료.\n",
			inet_ntoa(clntAdr.sin_addr), ntohs(clntAdr.sin_port));
		closesocket(hClntSock);
		
	}
	closesocket(hServSock);
	WSACleanup();
	return 0;
}

int calculate(int opndCnt, int data[], char op) {
	int result = data[0];
		switch (op) {
		case '+':
			for (int i = 1; i < opndCnt; i++) {
				result += data[i];
			}
			break;
		case '-':
			for (int i = 1; i < opndCnt; i++) {
				result -= data[i];
			}
			break;
		case '*':
			for (int i = 1; i < opndCnt; i++) {
				result *= data[i];
			}
			break;
		}
	return result;
}


void ErrorHandling(char *message)
{
	fputs(message, stderr);
	fputc('\n', stderr);
	exit(1);
}
