#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>

#define BUF_SIZE 1024
#define MAX_PACKET_SIZE 120
void ErrorHandling(char *message);

int main()
{
	WSADATA			wsaData;
	SOCKET			hSocket;
	char			message[BUF_SIZE];
	int				strLen;
	SOCKADDR_IN		servAdr;

	if( WSAStartup( MAKEWORD(2, 2), &wsaData ) != 0 )
		ErrorHandling("WSAStartup() error!"); 

	hSocket = socket( PF_INET, SOCK_STREAM, 0 );   
	if( hSocket == INVALID_SOCKET )
		ErrorHandling("socket() error");
	
	memset(&servAdr, 0, sizeof(servAdr));
	servAdr.sin_family = AF_INET;
	servAdr.sin_port = htons(9000); // Big endian = network byte ordering
	servAdr.sin_addr.s_addr = inet_addr("127.0.0.1");

	printf("Client> try to connect with server.\n");
	int ret;
	ret = connect(	hSocket, 
				(SOCKADDR*)&servAdr, 
				sizeof(servAdr)
			);
	if (ret == SOCKET_ERROR) {
		ErrorHandling("connect() error");
	}

	printf("Client> connected...\n");
	/*
	// client APP 프로토콜 구현...(send/recv)...
	// 1~3까지 무한 반복...
	int str_len, total_len, rcv_sum;
	while (1) 
	{
		// 1. 사용자로부터 전송할 데이터 입력받기...
		printf("Client> Input message(Q/q to quit): ");
		scanf("%s", message);  // abc  -> abc0
		// 1-1. 입력된 스트링이 "q"/"Q" 인 경우 break;
		if ( !strcmp(message, "q") || !strcmp(message, "Q")) {
			break; 
		}
		// 2. 입력된 데이터를 서버로 전송 send()
		str_len = send(hSocket, message, strlen(message), 0);
		printf("Client> sent message(%s) to server(%d bytes)\n", 
			message, str_len);

		// 3. 서버가 echo back한 데이터를 수신하기. recv()
		// -> TCP는 데이터의 경계 구분이 없음. 수신할 데이터의 크기(사용자가 입력한 크기)가 존재하는 경우.
		total_len = str_len;
		rcv_sum = 0;
		
		while (rcv_sum < total_len) {
			strLen = recv(hSocket, &message[rcv_sum], total_len -rcv_sum, 0);
			rcv_sum += strLen;
			printf("Cient-TCP > recv %d bytes.(rcv_sum %d, total: %d\n",strlen,rcv_sum,total_len);
		}
		message[strLen] = 0;
		printf("Client> message from server: %s\n", message);
	}
	*/

	//	계산기 APP 계층 클라이언트 프로토콜 작성하기
	// send( data, ) char message[1024]  -> data 구성(메세지 스트림) (메세지에 정해진 패턴대로 데이터를 구성해야 한다)
	// 메세지를 msg형태로 담는 것이 인캡슐레이션, 반대가 디캡슐
	int str_len, total_len, rcv_sum, opndCnt;
	int flag = 1;	//flag사용하는 것은 while문에서 탈출할 때 만약 다중 루프에서 break를 사용하면 전체 반복문을 벗어나기 힘들기 때문에 사용
	char data[MAX_PACKET_SIZE];
	while (flag) {
		// 1. 피연산자 수 입력받기 (data encapsulation)
		printf("Cilent> 피연산자 수 입력: ");
		scanf("%d", &opndCnt);
		data[0] = (char)opndCnt;

		// 2. 입력된 갯수만큼 피연산자 입력 받기 (data encapsulation)
		for (int i = 0; i < opndCnt; i++) {
			printf("- 피연산자: ");
			scanf("%d",(int*)&data[1+i*sizeof(int)]);
		}
		rewind(stdin);		// scanf가 %c로 읽기 전에 키보드 버퍼 클리어 필요.
		// 3. 연산자 입력받기 (data encapsulation)
		printf("Client> 연산자 입력: ");
		scanf("%c",&data[1+opndCnt*sizeof(int)]);		// 키보드 입력 버퍼에서 %c를 사용하면 앞에서 입력된 엔터가 남아있기 때문에 연산자가 입력되지 않음.

		// 4. 서버로 만들어진 data 송신

		// 5. 서버의 계산 결과(4bytes) 수신 및 화면에 출력
	}




	closesocket( hSocket );
	WSACleanup();
	return 0;
}

void ErrorHandling( char *message )
{
	printf("[ERROR] %s \n", message );	
	exit(1);
}
